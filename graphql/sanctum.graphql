type AutenticationResponse{
    user: User!
    token: String!
}

type LogoutResponse {
    status: LogoutStatus!
    message: String!
}

enum LogoutStatus {
    """TOKEN_REVOKED"""
    TOKEN_REVOKED
}

extend type Mutation {
    login(
        email: String! @rules(apply: [ "required", "email", "string", "exists:users,email"])
        password: String! @rules( apply: [ "required", "string", "App\\Rules\\checkPassword"])
    ): AutenticationResponse!
    @field(resolver: "App\\GraphQL\\Mutations\\Login")
    register(
        name: String! @rules(apply: [  "required", "string"])
        email: String! @rules(apply: [  "required", "bail", "email", "string", "unique:users,email"])
        password: String! @rules(apply: [ "required", "string", "confirmed", "min:6"])
        password_confirmation: String! 
    ): AutenticationResponse!
    @field(resolver: "App\\GraphQL\\Mutations\\Register")
    logout: LogoutResponse! @guard
    @field(resolver: "App\\GraphQL\\Mutations\\Logout")
}
