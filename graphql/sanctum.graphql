type AutenticationResponsePayload {
    user: User!
    token: String!
}

type LogoutResponsePayload {
    status: LogoutStatus!
    message: String!
}

enum LogoutStatus {
    """TOKEN_REVOKED"""
    TOKEN_REVOKED
}

input LoginInput {
    email: String! @rules(apply: [ "required", "email", "string", "exists:users,email"])
    password: String! @rules( apply: [ "required", "string", "App\\Rules\\checkPassword"])
}

input RegisterInput {
    name: String! @rules(apply: [  "required", "string"])
    email: String! @rules(apply: [  "bail", "required", "email", "string", "unique:users,email"])
    password: String! @rules(apply: [ "bail", "required", "string", "confirmed", "min:6"])
    password_confirmation: String!  @rules(apply: [ "bail", "required", "string"])
}

extend type Mutation {
    login(input: LoginInput! @spread): AutenticationResponsePayload!
    @field(resolver: "App\\GraphQL\\Mutations\\LoginPayload")
    register(input: RegisterInput! @spread): AutenticationResponsePayload!
    @field(resolver: "App\\GraphQL\\Mutations\\RegisterPayload")
    logout: LogoutResponsePayload! @guard
    @field(resolver: "App\\GraphQL\\Mutations\\LogoutPayload")
}
